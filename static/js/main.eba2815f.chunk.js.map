{"version":3,"sources":["serviceWorker.ts","Components/Theme.tsx","Components/Header.tsx","Components/AspectRatio.tsx","Components/Copyright.tsx","Components/App.tsx","State/Reducers/GameReducer.ts","Containers/Game.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Theme","createMuiTheme","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","outerWrapper","props","width","height","paddingBottom","ratio","toString","innerWrapper","top","right","bottom","left","AspectRatio","children","Copyright","align","Link","href","Date","getFullYear","Component","App","pixiCanvasRef","useRef","useEffect","current","pixiApp","resizeTo","appendChild","view","Container","component","gutterBottom","message","aspectRatio","style","ref","Grid","container","direction","justify","alignItems","item","INITIAL_STATE","gameReducer","state","GameContainer","connect","gameStore","createStore","Pixi","transparent","Game","store","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.eba2815f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst Theme = createMuiTheme();\n\nexport default Theme;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Goblin King\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import * as React from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface AspectRatioProps {\n  children?: any\n  ratio: number\n}\n\nconst useStyles = makeStyles({\n  outerWrapper: (props: AspectRatioProps) => ({\n    position: 'relative',\n    width: '100%',\n    height: 0,\n    paddingBottom: ((1 / props.ratio) * 100).toString() + '%',\n  }),\n  innerWrapper: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  }\n});\n\nfunction AspectRatio(props: AspectRatioProps) {\n  const classes = useStyles(props);\n\n  return (\n    <div className={classes.outerWrapper}>\n      <div className={classes.innerWrapper}>\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default AspectRatio","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nclass Copyright extends Component {\n  render() {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Copyright © '}\n        <Link color=\"inherit\" href=\"https://www.linkedin.com/in/gurwindergulati/\">\n          GGulati\n        </Link>{' '}\n        {new Date().getFullYear()}\n        {'.'}\n      </Typography>\n    );\n  }\n}\n\nexport default Copyright;","import React, { Fragment, useRef, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport * as Pixi from \"pixi.js\"\n\nimport Header from './Header'\nimport AspectRatio from './AspectRatio';\nimport Copyright from './Copyright';\nimport { Grid } from '@material-ui/core';\n\ntype AppProps = {\n  message: string,\n  aspectRatio: number,\n  pixiApp: Pixi.Application,\n}\n\nfunction App(props: AppProps) {\n  const pixiCanvasRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (pixiCanvasRef.current != null) {\n      props.pixiApp.resizeTo = pixiCanvasRef.current;\n      pixiCanvasRef.current.appendChild(props.pixiApp.view);\n    }\n  })\n\n  return (\n    <Fragment>\n      <Header />\n      <Container>\n        <Typography variant=\"h5\" component=\"h1\" gutterBottom>\n          {props.message}\n        </Typography>\n        <AspectRatio ratio={props.aspectRatio}>\n          <div style={{width: '100%', height: '100%'}} ref={pixiCanvasRef} />\n        </AspectRatio>\n\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n          <Grid item>\n            <Button variant=\"contained\">Bread</Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\">Scrap</Button>\n          </Grid>\n        </Grid>\n      </Container>\n      <Copyright />\n    </Fragment>\n  );\n}\n\nexport default App;","export type GameState = {\n  message: string\n}\n\nconst INITIAL_STATE: GameState = {\n  message: 'Hello world!'\n}\n\nfunction gameReducer(state: GameState = INITIAL_STATE) {\n  return state;\n}\n\nexport default gameReducer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport * as Pixi from \"pixi.js\"\n\nimport App from '../Components/App';\nimport gameReducer, { GameState } from '../State/Reducers/GameReducer';\n\nconst mapStateToProps = (state: GameState) => ({\n  message: state.message,\n});\n\nconst GameContainer = connect(\n  mapStateToProps,\n)(App);\n\nconst gameStore = createStore(gameReducer);\nconst pixiApp = new Pixi.Application({transparent: false});\n\nclass Game extends Component {\n  render() {\n    return (\n      <Provider store={gameStore}>\n        <GameContainer pixiApp={pixiApp} aspectRatio={16 / 9}/>\n      </Provider>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport Theme from './Components/Theme';\n\nimport Game from './Containers/Game';\n\nReactDOM.render(\n  <ThemeProvider theme={Theme}>\n    <CssBaseline />\n    <Game />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}